from flask import Flask, render_template, request
import openai
from dotenv import load_dotenv
import os

load_dotenv()
app = Flask(__name__)
openai.api_key = os.environ.get('YOUR_API_KEY')
openai.api_base = "https://api.openai.iniad.org/api/v1"

# 感情パラメーターのデフォルト値
DEFAULT_EMOTIONS = {
    "joy": 0,
    "anger": 0,
    "sadness": 0,
    "happiness": 0,
    "confidence": 0,
    "confusion": 0,
    "fear": 0,
}

def get_member_emotions():
    member_emotions = {}
    for i in range(1, 6):
        member_name = f"member{i}"
        member_emotions[member_name] = DEFAULT_EMOTIONS.copy()
    return member_emotions

def add_emotion_statements(chat, member_emotions):
    for member_name, emotions in member_emotions.items():
        emotion_statements = [f"{member_name}の{emotion}: {value}" for emotion, value in emotions.items()]
        if emotion_statements:
            chat.append({"role": "assistant", "content": "\n".join(emotion_statements)})

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['GET', 'POST'])
def chat():
    if request.method == 'POST':
        amount_tokens = 0
        chat = []

        # 感情パラメーターの初期化
        member_emotions = get_member_emotions()

        # Group discussion inputs.
        group_discussion_inputs = {
            "member1": request.form.get('member1_input', ''),
            "member2": request.form.get('member2_input', ''),
            "member3": request.form.get('member3_input', ''),
            "member4": request.form.get('member4_input', ''),
            "member5": request.form.get('member5_input', ''),
            #... More members if needed
        }

        discussion_content = []
        for member, content in group_discussion_inputs.items():
            if content:
                formatted_content = f"{member} ({content})"
                discussion_content.append(formatted_content)
                
        # Process group discussion first, if any.
        group_discussion_text = '\n'.join(discussion_content)
        if group_discussion_text:
            chat.append({"role": "system", "content": group_discussion_text})

        # Process other chat inputs
        setting = request.form.get('setting', '')
        if setting.lower() in ['y', 'yes']:
            content = request.form.get('content', '')
            chat.append({"role": "system", "content": content})
        
        user_input = request.form.get('user_input', '')
        if user_input.lower() in ['q', 'quit']:
            return f"トークンの合計数: {amount_tokens}"

        # User input is added to chat
        chat.append({"role": "user", "content": user_input})
        
        # Personality statements (assuming these fields exist in your form)
        # Collect these only if you need them for the conversation
        personalities = {key: request.form.get(key, '') for key in ['personality_A', 'personality_B', 'personality_C', 'personality_D', 'personality_E']}
        personality_statements = [f"{key[-1]}: {value}" for key, value in personalities.items() if value]
        
        if personality_statements:
            chat.append({"role": "assistant", "content": "\n".join(personality_statements)})

        # チャットに感情パラメーターの情報を追加
        add_emotion_statements(chat, member_emotions)

        # Call the OpenAI API for a chat response
        response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=chat)
        assistant_msg = response["choices"][0]["message"]["content"].strip()
        amount_tokens += response["usage"]["total_tokens"]
        chat.append({"role": "assistant", "content": assistant_msg})

        return render_template('chat.html', user_input=user_input, assistant_response=assistant_msg, discussion_response=group_discussion_text)
    
    else:
        # Render the initial form
        return render_template('chat.html')

if __name__ == '__main__':
    app.run(debug=True)
